<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>BruceZhou</title><subtitle>这是通过Chirpy主题配置而成的</subtitle> <updated>2022-09-12T00:24:43+00:00</updated> <author> <name>BruceZhou</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 BruceZhou </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>集合</title><link href="/posts/JavaSE_%E9%9B%86%E5%90%88/" rel="alternate" type="text/html" title="集合" /><published>2022-09-11T06:34:00+00:00</published> <updated>2022-09-11T06:34:00+00:00</updated> <id>/posts/JavaSE_%E9%9B%86%E5%90%88/</id> <content src="/posts/JavaSE_%E9%9B%86%E5%90%88/" /> <author> <name>BruceZhou</name> </author> <category term="集合" /> <summary> 1.Collection集合 1.1数组和集合的对比【记忆】 相同点 都是容器,可以存储多个数据 不同点 数组的长度是不可变的,集合的长度是可变的 数组可以存基本数据类型和引用数据类型 集合只能存引用数据类型,如果要存基本数据类型,需要存对应的包装类 1.2集合类体系结构 </summary> </entry> <entry><title>面向对象-包数递时</title><link href="/posts/JavaSE_advanced6/" rel="alternate" type="text/html" title="面向对象-包数递时" /><published>2022-09-02T06:34:00+00:00</published> <updated>2022-09-11T05:13:21+00:00</updated> <id>/posts/JavaSE_advanced6/</id> <content src="/posts/JavaSE_advanced6/" /> <author> <name>BruceZhou</name> </author> <category term="面向对象-知识点4" /> <summary> 面向对象-包数递时 1.包装类 1.1 基本类型包装类 基本类型包装类的作用 将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据 常用的操作之一：用于基本数据类型与字符串之间的转换 基本类型对应的包装类 基本数据类型 包装类 byte Byte short Short int Integer long ... </summary> </entry> <entry><title>面向对象-异常</title><link href="/posts/JavaSE_advanced5/" rel="alternate" type="text/html" title="面向对象-异常" /><published>2022-09-02T06:34:00+00:00</published> <updated>2022-09-11T05:13:21+00:00</updated> <id>/posts/JavaSE_advanced5/</id> <content src="/posts/JavaSE_advanced5/" /> <author> <name>BruceZhou</name> </author> <category term="面向对象-知识点3" /> <summary> 面向对象-知识点3 4.异常 4.1 异常的体系结构和分类 1.什么是异常？ 异常就是程序出现了不正常的情况 注意：语法错误不算在异常体系中 2.异常的体系结构 //除RuntimeException之外的异常 public class ExceptionDemo1 { public static void main(String[] args) { // int [] arr = {1,2,3,4,5}; // System.out.println(arr[10]);//ArrayIndexOutOfBoundsException // String s = null; // System.out.println(s.equals("嘿嘿"));//NullPointerException ... </summary> </entry> <entry><title>面向对象-知识点API</title><link href="/posts/JavaSE_advanced4/" rel="alternate" type="text/html" title="面向对象-知识点API" /><published>2022-09-02T06:34:00+00:00</published> <updated>2022-09-02T06:34:00+00:00</updated> <id>/posts/JavaSE_advanced4/</id> <content src="/posts/JavaSE_advanced4/" /> <author> <name>BruceZhou</name> </author> <category term="面向对象-知识点2" /> <summary> 面向对象-知识点2 3.API 3.1 API概述 什么是API ​ API (Application Programming Interface) ：应用程序编程接口 java中的API ​ 指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。 3.2 API帮助文档 打开帮助文档 找到索引选项卡中的输入框 在输入框中输入Random 看类在哪个包下 看类的描述 看构造方法 看成员方法 4.常用API 4.1 Math 1、Math类概... </summary> </entry> <entry><title>面向对象-内部类&amp;Lambda</title><link href="/posts/JavaSE_advanced3/" rel="alternate" type="text/html" title="面向对象-内部类&amp;Lambda" /><published>2022-09-02T06:34:00+00:00</published> <updated>2022-09-02T08:54:55+00:00</updated> <id>/posts/JavaSE_advanced3/</id> <content src="/posts/JavaSE_advanced3/" /> <author> <name>BruceZhou</name> </author> <category term="面向对象-知识点1" /> <summary> 面向对象-知识点1 1.内部类 1.1 内部类-成员内部类 1.什么是内部类 在一个类中定义一个类。 举例：在一个类A的内部定义一个类B，类B就被称为内部类，像这样👇 /* 格式： class 外部类名{ 修饰符 class 内部类名{ } } */ class Outer { public class Inner { } } 3 内部类的分类 在类的成员位置:成员内部类 在类方法内位置:局部内部类 4 外部如何使用普通成员内部类？ 格式:外部类名.内部类名 对象名=new 外部对象().new 内部对象() 范例: Outer.Inner oi=new Outer().new Inter(); class Outer { private int a ... </summary> </entry> </feed>
